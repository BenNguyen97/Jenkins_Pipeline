pipeline {
    agent any

    environment {
        TERRAFORM_BIN = "$HOME/bin/terraform"
        AWS_CREDENTIALS_ID = 'AWS_CREDENTIALS'
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main',
                    credentialsId: 'github-token',
                    url: 'https://github.com/BenNguyen97/Jenkins_Pipeline.git'
            }
        }

        stage('Setup Terraform') {
            steps {
                script {
                    sh '''
                    if ! command -v $HOME/bin/terraform &> /dev/null; then
                        echo "Installing Terraform..."
                        curl -fsSL https://releases.hashicorp.com/terraform/1.10.5/terraform_1.10.5_linux_amd64.zip -o terraform.zip
                        unzip -o terraform.zip
                        chmod +x terraform
                        mkdir -p $HOME/bin
                        mv terraform $HOME/bin/
                        rm -f terraform.zip
                    else
                        echo "Terraform already installed"
                    fi
                    echo "Terraform version:"
                    $HOME/bin/terraform version
                    '''
                }
            }
        }

        stage('Terraform Destroy Plan') {
            steps {
                withCredentials([aws(credentialsId: AWS_CREDENTIALS_ID)]) {
                    script {
                        sh '''
                        cd Infrastructure
                        $HOME/bin/terraform init
                        $HOME/bin/terraform plan -destroy -out=tfplan-destroy \
                            -var="access_key=$AWS_ACCESS_KEY_ID" \
                            -var="secret_key=$AWS_SECRET_ACCESS_KEY"
                        '''
                    }
                }
            }
        }

        stage('Terraform Destroy Apply') {
            steps {
                withCredentials([aws(credentialsId: AWS_CREDENTIALS_ID)]) {
                    script {
                        sh '''
                        cd Infrastructure
                        if [ -f "tfplan-destroy" ]; then
                            $HOME/bin/terraform apply -auto-approve tfplan-destroy
                        else
                            echo "‚ùå tfplan-destroy not found! Skipping destroy."
                            exit 1
                        fi
                        '''
                    }
                }
            }
        }
    }
}
